apiVersion: v1
kind: ConfigMap
metadata:
  name: prosody-cm
  namespace: default
data:

  # Configuration files
  prosody.cfg.lua: |
    daemonize = true;
    -- Prosody XMPP Server Configuration
    --
    -- Information on configuring Prosody can be found on our
    -- website at https://prosody.im/doc/configure
    --
    -- Tip: You can check that the syntax of this file is correct
    -- when you have finished by running this command:
    --     prosodyctl check config
    -- If there are any errors, it will let you know what and where
    -- they are, otherwise it will keep quiet.
    --
    -- Good luck, and happy Jabbering!
    
    
    ---------- Server-wide settings ----------
    -- Settings in this section apply to the whole server and are the default settings
    -- for any virtual hosts
    
    -- This is a (by default, empty) list of accounts that are admins
    -- for the server. Note that you must create the accounts separately
    -- (see https://prosody.im/doc/creating_accounts for info)
    -- Example: admins = { "user1@example.com", "user2@example.net" }
    admins = { }
    
    -- Enable use of libevent for better performance under high load
    -- For more information see: https://prosody.im/doc/libevent
    --use_libevent = true
    
    -- Prosody will always look in its source directory for modules, but
    -- this option allows you to specify additional locations where Prosody
    -- will look for modules first. For community modules, see https://modules.prosody.im/
    --plugin_paths = {}
    
    -- Single directory for custom prosody plugins and/or Lua libraries installation
    -- This path takes priority over plugin_paths, when prosody is searching for modules
    --installer_plugin_path = ""
    
    -- This is the list of modules Prosody will load on startup.
    -- It looks for mod_modulename.lua in the plugins folder, so make sure that exists too.
    -- Documentation for bundled modules can be found at: https://prosody.im/doc/modules
    modules_enabled = {
    
        -- Generally required
            "roster"; -- Allow users to have a roster. Recommended ;)
            "saslauth"; -- Authentication for clients and servers. Recommended if you want to log in.
            "tls"; -- Add support for secure TLS on c2s/s2s connections
            "dialback"; -- s2s dialback support
            "disco"; -- Service discovery
    
        -- Not essential, but recommended
            "carbons"; -- Keep multiple clients in sync
            "pep"; -- Enables users to publish their avatar, mood, activity, playing music and more
            "private"; -- Private XML storage (for room bookmarks, etc.)
            "blocklist"; -- Allow users to block communications with other users
            "vcard4"; -- User profiles (stored in PEP)
            "vcard_legacy"; -- Conversion between legacy vCard and PEP Avatar, vcard
    
        -- Nice to have
            "version"; -- Replies to server version requests
            "uptime"; -- Report how long server has been running
            "time"; -- Let others know the time here on this server
            "ping"; -- Replies to XMPP pings with pongs
            "register"; -- Allow users to register on this server using a client and change passwords
            --"mam"; -- Store messages in an archive and allow users to access it
            --"csi_simple"; -- Simple Mobile optimizations
    
        -- Admin interfaces
            "admin_adhoc"; -- Allows administration via an XMPP client that supports ad-hoc commands
            --"admin_telnet"; -- Opens telnet console interface on localhost port 5582
    
        -- HTTP modules
            --"bosh"; -- Enable BOSH clients, aka "Jabber over HTTP"
            --"websocket"; -- XMPP over WebSockets
            --"http_files"; -- Serve static files from a directory over HTTP
    
        -- Other specific functionality
            --"limits"; -- Enable bandwidth limiting for XMPP connections
            --"groups"; -- Shared roster support
            --"server_contact_info"; -- Publish contact information for this service
            --"announce"; -- Send announcement to all online users
            --"welcome"; -- Welcome users who register accounts
            --"watchregistrations"; -- Alert admins of registrations
            --"motd"; -- Send a message to users when they log in
            --"legacyauth"; -- Legacy authentication. Only used by some old clients and bots.
            --"proxy65"; -- Enables a file transfer proxy service which clients behind NAT can use
    }
    
    -- These modules are auto-loaded, but should you want
    -- to disable them then uncomment them here:
    modules_disabled = {
        -- "offline"; -- Store offline messages
        -- "c2s"; -- Handle client connections
        -- "s2s"; -- Handle server-to-server connections
        -- "posix"; -- POSIX functionality, sends server to background, etc.
    }
    
    -- Disable account creation by default, for security
    -- For more information see https://prosody.im/doc/creating_accounts
    allow_registration = false
    
    -- Force clients to use encrypted connections? This option will
    -- prevent clients from authenticating unless they are using encryption.
    
    c2s_require_encryption = true
    
    -- Force servers to use encrypted connections? This option will
    -- prevent servers from authenticating unless they are using encryption.
    
    s2s_require_encryption = true
    
    -- Force certificate authentication for server-to-server connections?
    
    s2s_secure_auth = false
    
    -- Some servers have invalid or self-signed certificates. You can list
    -- remote domains here that will not be required to authenticate using
    -- certificates. They will be authenticated using DNS instead, even
    -- when s2s_secure_auth is enabled.
    
    --s2s_insecure_domains = { "insecure.example" }
    
    -- Even if you disable s2s_secure_auth, you can still require valid
    -- certificates for some domains by specifying a list here.
    
    --s2s_secure_domains = { "jabber.org" }
    
    -- Required for init scripts and prosodyctl
    pidfile = "/var/run/prosody/prosody.pid"
    
    -- Select the authentication backend to use. The 'internal' providers
    -- use Prosody's configured data storage to store the authentication data.
    
    authentication = "internal_hashed"
    
    -- Select the storage backend to use. By default Prosody uses flat files
    -- in its configured data directory, but it also supports more backends
    -- through modules. An "sql" backend is included by default, but requires
    -- additional dependencies. See https://prosody.im/doc/storage for more info.
    
    --storage = "sql" -- Default is "internal"
    
    -- For the "sql" backend, you can uncomment *one* of the below to configure:
    --sql = { driver = "SQLite3", database = "prosody.sqlite" } -- Default. 'database' is the filename.
    --sql = { driver = "MySQL", database = "prosody", username = "prosody", password = "secret", host = "localhost" }
    --sql = { driver = "PostgreSQL", database = "prosody", username = "prosody", password = "secret", host = "localhost" }
    
    
    -- Archiving configuration
    -- If mod_mam is enabled, Prosody will store a copy of every message. This
    -- is used to synchronize conversations between multiple clients, even if
    -- they are offline. This setting controls how long Prosody will keep
    -- messages in the archive before removing them.
    
    archive_expires_after = "1w" -- Remove archived messages after 1 week
    
    -- You can also configure messages to be stored in-memory only. For more
    -- archiving options, see https://prosody.im/doc/modules/mod_mam
    
    -- Logging configuration
    -- For advanced logging see https://prosody.im/doc/logging
    log = {
        {levels = {min = "info"}, to = "console"};
    }
    
    -- Uncomment to enable statistics
    -- For more info see https://prosody.im/doc/statistics
    -- statistics = "internal"
    
    -- Certificates
    -- Every virtual host and component needs a certificate so that clients and
    -- servers can securely verify its identity. Prosody will automatically load
    -- certificates/keys from the directory specified here.
    -- For more information, including how to use 'prosodyctl' to auto-import certificates
    -- (from e.g. Let's Encrypt) see https://prosody.im/doc/certificates
    
    -- Location of directory to find certificates in (relative to main config file):
    certificates = "certs"
    
    -- HTTPS currently only supports a single certificate, specify it here:
    --https_certificate = "certs/localhost.crt"
    
    ----------- Virtual hosts -----------
    -- You need to add a VirtualHost entry for each domain you wish Prosody to serve.
    -- Settings under each VirtualHost entry apply *only* to that host.
    
    VirtualHost "prosody-xmpp"
    
      ssl = {
        certificate = "/etc/prosody/certs/prosody-xmpp.crt";
        key = "/etc/prosody/certs/prosody-xmpp.key";
      }
    
    --VirtualHost "example.com"
    --	certificate = "/path/to/example.crt"
    
    ------ Components ------
    -- You can specify components to add hosts that provide special services,
    -- like multi-user conferences, and transports.
    -- For more information on components, see https://prosody.im/doc/components
    
    ---Set up a MUC (multi-user chat) room server on conference.example.com:
    --Component "conference.example.com" "muc"
    --- Store MUC messages in an archive and allow users to access it
    --modules_enabled = { "muc_mam" }
    
    ---Set up an external component (default component port is 5347)
    --
    -- External components allow adding various services, such as gateways/
    -- transports to other networks like ICQ, MSN and Yahoo. For more info
    -- see: https://prosody.im/doc/components#adding_an_external_component
    --
    --Component "gateway.example.com"
    --	component_secret = "password"
    
    --external_tls_verify = none
    ssl = {
        verify = none;
    }

  # Añadimos tambien el certificado de 'prosody-xmpp'
  # https://prosody.im/doc/certificates
  prosody-xmpp.cnf: |
    [req]
    distinguished_name = distinguished_name
    req_extensions = certrequest
    prompt = no
    x509_extensions = selfsigned

    [distinguished_name]
    countryName = ES
    localityName = The Internet
    organizationName = UPV/EHU
    organizationalUnitName = DISA
    commonName = prosody-xmpp
    emailAddress = xmpp@prosody-xmpp

    [certrequest]
    basicConstraints = CA:FALSE
    extendedKeyUsage = serverAuth,clientAuth
    keyUsage = digitalSignature,keyEncipherment
    subjectAltName = @subject_alternative_name

    [subject_alternative_name]
    DNS.0 = prosody-xmpp
    otherName.0 = 1.3.6.1.5.5.7.8.7;IA5STRING:_xmpp-client.prosody-xmpp
    otherName.1 = 1.3.6.1.5.5.7.8.7;IA5STRING:_xmpp-server.prosody-xmpp
    otherName.2 = 1.3.6.1.5.5.7.8.5;FORMAT:UTF8,UTF8:prosody-xmpp

    [selfsigned]
    basicConstraints = CA:TRUE
    subjectAltName = @subject_alternative_name

  prosody-xmpp.crt: |
    -----BEGIN CERTIFICATE-----
    MIIEJDCCAwygAwIBAgIUfb5fF+N4OtBR1MXIWy4lXz+RCcIwDQYJKoZIhvcNAQEL
    BQAwfjELMAkGA1UEBhMCRVMxFTATBgNVBAcMDFRoZSBJbnRlcm5ldDEQMA4GA1UE
    CgwHVVBWL0VIVTENMAsGA1UECwwERElTQTEVMBMGA1UEAwwMcHJvc29keS14bXBw
    MSAwHgYJKoZIhvcNAQkBFhF4bXBwQHByb3NvZHkteG1wcDAeFw0yNDA1MTYxNDI4
    NTFaFw0yNTA1MTYxNDI4NTFaMH4xCzAJBgNVBAYTAkVTMRUwEwYDVQQHDAxUaGUg
    SW50ZXJuZXQxEDAOBgNVBAoMB1VQVi9FSFUxDTALBgNVBAsMBERJU0ExFTATBgNV
    BAMMDHByb3NvZHkteG1wcDEgMB4GCSqGSIb3DQEJARYReG1wcEBwcm9zb2R5LXht
    cHAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCwEFr96yQRc7AulG57
    wqdDfuDQUhvdOyPw1IXSz/UDh66tRHPaIFLOepaXk98Hp9uyXfLDTYOEfpEZFreO
    BL2fC5jYmJPV12xZA2OCYn5pfwPV3CzKsYDB9h6NS7cdUzYxBeQcBp26vI7VPSN+
    r4kRO8ByEbJHQO6jkJAPfD5TJ9++kmAtKrTzHLPX/ZnEY6BARVnw0fV6aPnLcrzW
    Q5Im1jCwZj++OdEXq4HcmsM8d4gug0k/E4FvN0pvL/6QAUeNg+jNdY6WHU7gIE3L
    Ia/DAy+MzWv4mJ6ERErwZ/7ccq3vTUNx3dLTnMDN4LJBjrLt0sPByt6bkmqjM/6b
    9O6ZAgMBAAGjgZkwgZYwDAYDVR0TBAUwAwEB/zCBhQYDVR0RBH4wfIIMcHJvc29k
    eS14bXBwoCcGCCsGAQUFBwgHoBsWGV94bXBwLWNsaWVudC5wcm9zb2R5LXhtcHCg
    JwYIKwYBBQUHCAegGxYZX3htcHAtc2VydmVyLnByb3NvZHkteG1wcKAaBggrBgEF
    BQcIBaAODAxwcm9zb2R5LXhtcHAwDQYJKoZIhvcNAQELBQADggEBAJmqJDSmQi1a
    X+26p+S3B/D+pWsvVu9Ouu8phI9uclPIgSvyAbrcGS1EiW2oTwg376+u68jPM0Hs
    cA3Q5KX9iXpczbRt7z9jOP/wgdH8fdhpLa+ac+SNDzNMpqY8J9VePnBnc35YaNK3
    xuNYas+TaV+MtkHKBdlmTVv6FgZRaP5e70FH21/QWvxapUdtEWN0CBi2/i6eQJ9K
    lgm1UlfwplJIqK3lHCvTu/OZUniVv8FcTcCtu5yzZqFk0unLLCiCdWE2gWBp3IIJ
    CfuiWxunmiMbnv1C4nDyNfj/vm2581qr06zcDQuLQe5ceEJ/23bzJkS0uVsIuIXk
    UtkYxj3Rclw=
    -----END CERTIFICATE-----

  prosody-xmpp.key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEpQIBAAKCAQEAsBBa/eskEXOwLpRue8KnQ37g0FIb3Tsj8NSF0s/1A4eurURz
    2iBSznqWl5PfB6fbsl3yw02DhH6RGRa3jgS9nwuY2JiT1ddsWQNjgmJ+aX8D1dws
    yrGAwfYejUu3HVM2MQXkHAaduryO1T0jfq+JETvAchGyR0Duo5CQD3w+UyffvpJg
    LSq08xyz1/2ZxGOgQEVZ8NH1emj5y3K81kOSJtYwsGY/vjnRF6uB3JrDPHeILoNJ
    PxOBbzdKby/+kAFHjYPozXWOlh1O4CBNyyGvwwMvjM1r+JiehERK8Gf+3HKt701D
    cd3S05zAzeCyQY6y7dLDwcrem5JqozP+m/TumQIDAQABAoIBADHmwNN9JQDpSEM7
    gMEFH8FKoc+JpiojDAHDSpbAqFIyz7h+UVO+m5m4NxyJJcqWsfcxF5BxVNhlwxxY
    Svguscv1ToH9ZNFUOHpWMosO/YNLI7wmpm9gtfzDlE856ZGfNxnX8Jpc6bG2pckc
    hgXvHKtMwzPRfjUh20FyxNIOxd9tUmrIeHQJNnMWya42ZYQe45H5IlW7cxyYEQ++
    3VkbvOJSDk3ccNa8mv5sg675E7akY1AQhS7KrZeh0ozvV1LSEWJum6ETJnZGWZan
    0V7LJjxqKeSJAvDYpRqv8DdJD1+9m1OC+1gRob0CPXoKDDzvaRAknXNDDW6rkQg6
    8MVxgjECgYEA1yYiG6ugkvpy79wG+FEqHi+IHE9lJ+Ik0Q2tmgsQ1OuvhypnqyY2
    pn9nQM0J5xELTEpZPrh2UUSdzm0mD964CCCqXM+NpK4pjx/3cYUfKHlf/inrpmYe
    8avYUkcYR205fB811BPjvOuF23Yoi5XRo2aVqkRXmjaTrl7UlrlTY+0CgYEA0X5k
    ZegRdwQEJp8rGjNW81rj6KAQReytpqtw6bydnlE7BflW2CMC2mWqgEWfPSvEFLBq
    TZIftjurcJYH8bjqeupAgtTIl/ruuHI0BgK4Gv62lHSGLx3NigOH+kVRxlXkdk6+
    WbN+i/Q+1E3mO+/I8NQFvja6YuXXuQf3edoG990CgYEAoFaZ6rcwNvkQ+TKnux15
    3v8bV8XPpDaDq4yfCQMgKx3uNTRkCAe1iMW/5Gop7BsmqVdrRTPhcVVKqdFsIT2h
    NuVpMTu42ra04CY5mU9VViuGX3tMVDkc7Ixd7YtwS6LZyWfVDNU5zsxTeKeJNeWU
    U0sbVMYT5yivTK79jcpVnE0CgYEAt8/9iYjQ4iuM9NJNwGRxk38ZYAAppyDe0NG2
    de/AIKxHbJt1PpmhpDz2GCx+Zu7i0gBklYFz/7JlX5jUiZxlaMnnJqRLCUbsdLwH
    t4plPZJmYuXG4sp0kPc+NTLjaHHuznuS+yPKEkSRaDidndNr7RsrmtVsPuBKophB
    5RGPcaUCgYEAqHlGGy3TXP9Nial0R+EtJOBarQbPfOcp0JMUdrhKLn9vjJXMMp49
    09oHWa+ddYLH1tw4l4WnWQ/XmtvK80Ry1FzfdIe3frKN2bGi8kziLZCBFg0FRdL+
    j+5fLSiOBcnTzz4dXWW/cC9ch03dsu/nZwkOQSGjkHrlt7f1ZySNf8s=
    -----END RSA PRIVATE KEY-----
